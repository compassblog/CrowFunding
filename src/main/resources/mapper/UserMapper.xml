<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="com.tide.dao.UserMapper" >
  <resultMap id="BaseResultMap" type="com.tide.bean.User" >
    <id column="id" property="id" jdbcType="INTEGER" />
    <result column="openid" property="openid" jdbcType="VARCHAR" />
    <result column="nickname" property="nickname" jdbcType="VARCHAR" />
    <!--<result column="password" property="password" jdbcType="VARCHAR" />-->
    <result column="sex" property="sex" jdbcType="INTEGER" />
    <result column="headimgurl" property="headimgurl" jdbcType="VARCHAR" />
    <result column="phone" property="phone" jdbcType="VARCHAR" />
    <result column="province" property="province" jdbcType="VARCHAR" />
    <result column="city" property="city" jdbcType="VARCHAR" />
    <result column="type" property="type" jdbcType="INTEGER" />
    <result column="language" property="language" jdbcType="VARCHAR" />
    <result column="intro" property="intro" jdbcType="LONGVARCHAR" />
  </resultMap>
  <delete id="deleteByPrimaryKey" parameterType="java.lang.Integer" >
    delete from zc_user
    where id = #{id,jdbcType=INTEGER}
  </delete>
  <insert id="insert" parameterType="com.tide.bean.User" keyProperty="id" useGeneratedKeys="true">
    insert into zc_user (id, openid, nickname, 
      password, sex, headimgurl, 
      phone, province, city, 
      type, language, intro
      )
    values (#{id,jdbcType=INTEGER}, #{openid,jdbcType=VARCHAR}, #{nickname,jdbcType=VARCHAR}, 
      #{password,jdbcType=VARCHAR}, #{sex,jdbcType=INTEGER}, #{headimgurl,jdbcType=VARCHAR}, 
      #{phone,jdbcType=VARCHAR}, #{province,jdbcType=VARCHAR}, #{city,jdbcType=VARCHAR}, 
      #{type,jdbcType=INTEGER}, #{language,jdbcType=VARCHAR}, #{intro,jdbcType=LONGVARCHAR}
      )
  </insert>
  <update id="updateByPrimaryKey" parameterType="com.tide.bean.User" >
    update zc_user
    set openid = #{openid,jdbcType=VARCHAR},
      nickname = #{nickname,jdbcType=VARCHAR},
      password = #{password,jdbcType=VARCHAR},
      sex = #{sex,jdbcType=INTEGER},
      headimgurl = #{headimgurl,jdbcType=VARCHAR},
      phone = #{phone,jdbcType=VARCHAR},
      province = #{province,jdbcType=VARCHAR},
      city = #{city,jdbcType=VARCHAR},
      type = #{type,jdbcType=INTEGER},
      language = #{language,jdbcType=VARCHAR},
      intro = #{intro,jdbcType=LONGVARCHAR}
    where id = #{id,jdbcType=INTEGER}
  </update>
  <select id="selectByPrimaryKey" resultMap="BaseResultMap" parameterType="java.lang.Integer" >
    select id, openid, nickname, password, sex, headimgurl, phone, province, city, type, 
    language, intro
    from zc_user
    where id = #{id,jdbcType=INTEGER}
  </select>
  <select id="selectAll" resultMap="BaseResultMap" >
    select id, openid, nickname, password, sex, headimgurl, phone, province, city, type, 
    language, intro
    from zc_user
    ORDER BY id DESC
  </select>

  <select id="getCount" resultType="java.lang.Integer">
    select count(*)
    from zc_user
  </select>

  <select id="getUserByType" resultMap="BaseResultMap">
    select id, openid, nickname, sex, headimgurl, phone, province, city, type,
    language, intro
    from zc_user
    where type = #{type}
    ORDER BY id DESC
  </select>
  <select id="getUserByOpenid" resultMap="BaseResultMap">
    select id, openid, nickname, sex, headimgurl, phone, province, city, type,
    language, intro
    from zc_user
    where openid = #{openid}
  </select>

  <select id="getOpenidById" resultType="java.lang.String">
    select openid
    from zc_user
    where id = #{id, jdbcType=INTEGER}
  </select>
</mapper>